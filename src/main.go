package main

import (
	"encoding/json"
	"errors"
	"log"
	"net/http"
	"os"

	"github.com/fasthttp/router"
	"github.com/go-resty/resty/v2"
	"github.com/valyala/fasthttp"
)

type authresponse struct {
	Admin string `json:"-"`
	Token string
}

type AutoGenerated struct {
	Page       int `json:"page"`
	PerPage    int `json:"perPage"`
	TotalItems int `json:"totalItems"`
	TotalPages int `json:"totalPages"`
	Items      []struct {
		CollectionID   string `json:"@collectionId"`
		CollectionName string `json:"@collectionName"`
		Created        string `json:"created"`
		ID             string `json:"id"`
		LongURL        string `json:"long_url"`
		ShortURL       string `json:"short_url"`
		Updated        string `json:"updated"`
	} `json:"items"`
}

type Service interface {
	Store(string, string) error
	Lookup(string) (string, error)
}

//TODO implement service using dictionary

type DictStore struct {
	m map[string]string
}

func (store *DictStore) Store(short string, long string) error {
	store.m[short] = long
	return nil
}

func (store *DictStore) Lookup(short string) (string, error) {
	val, pres := store.m[short]
	if pres {
		return val, nil
	} else {
		return "", errors.New("Key not found")
	}
}

func NewDictstore() Service {
	ds := &DictStore{}
	ds.m = make(map[string]string)
	return ds
}

type handler struct {
	schema  string
	host    string
	storage Service
}

func NewHandler(schema string, host string, storage Service) *router.Router {
	router := router.New()

	h := handler{schema, host, storage}
	router.GET("/{shortLink}", h.redirect)
	return router
}

func (h handler) redirect(ctx *fasthttp.RequestCtx) {
	code := ctx.UserValue("shortLink").(string)

	uri, err := h.storage.Lookup(code)
	if err != nil {
		ctx.Response.Header.Set("Content-Type", "application/json")
		ctx.Response.SetStatusCode(http.StatusNotFound)
		return
	}

	ctx.Redirect(uri, http.StatusMovedPermanently)
}

func main() {
	user := os.Getenv("POCKET_SHORTEN_USERNAME")
	pass := os.Getenv("POCKET_SHORTEN_PASSWORD")
	url := os.Getenv("POCKET_DB_URL")

	client := resty.New()

	log.Printf("Pocketshortener.")
	if url == "" {
		log.Printf("%c", errors.New("Environment variable POCKET_DB_URL not set"))
	} else {
		log.Printf("Database url = %v", url)
	}

	if user == "" {
		log.Printf("%v", errors.New("Environment variable POCKET_SHORTEN_USERNAME not set"))
	} else {
		log.Printf("Database un = %v", user)
	}

	if pass == "" {
		log.Printf("%v", errors.New("Environment variable POCKET_SHORTEN_PASSWORD not set"))
	} else {
		log.Printf("Database pw= %v", pass)
	}

	log.Printf("Login URL %v\n", url+"api/admins/auth-via-email")

	resp, err := client.R().
		SetQueryParams(map[string]string{
			"page_no": "1",
		}).
		SetHeader("Accept", "application/json").
		SetHeader("Content-Type", "application/json").
		SetBody(`{"email":"` + user + `", "password":"` + pass + `"}`).
		Post(url + "api/admins/auth-via-email")

	if err != nil {
		log.Printf("%v", err)
	}
	if resp.StatusCode() != 200 {
		log.Printf("Authentication failed")
		log.Printf("%v", errors.New(string(resp.Body())))
	}

	dresp := authresponse{}
	err = json.Unmarshal(resp.Body(), &dresp)
	if err != nil {
		log.Printf("%v", err)
	}

	resp, err = client.R().
		SetQueryParams(map[string]string{
			"page_no": "1",
		}).
		SetHeader("Accept", "application/json").
		SetHeader("Authorization", "Admin "+dresp.Token).
		Get(url + "api/collections/urls/records")
	if resp.StatusCode() != 200 {
		log.Printf("%v", errors.New(string(resp.Body())))
	}
	if err != nil {
		log.Printf("%v", err)
	}

	dresp2 := AutoGenerated{}
	err = json.Unmarshal(resp.Body(), &dresp2)
	if err != nil {
		log.Printf("%v", err)
	}

	log.Printf("Contacted PocketBase and retreived %v entries", len(dresp2.Items))

	ds := NewDictstore()
	for _, element := range dresp2.Items {
		ds.Store(element.ShortURL, element.LongURL)
	}

	ds.Store("p1", "https://www.techmeme.com")
	ds.Store("p2", "https://www.apple.com")

	router := NewHandler("", "", ds)

	log.Fatal(fasthttp.ListenAndServe(":8080", router.Handler))

	// TODO test locally with CURL
	// TODO dockerize and deploy to cluster
	// TODO add cloudflare ingress
}
